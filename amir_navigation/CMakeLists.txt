cmake_minimum_required(VERSION 3.8)
project(amir_navigation)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(xacro REQUIRED)
find_package(std_msgs REQUIRED)
find_package(amir_interfaces REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(rclcpp_action REQUIRED)
find_package(behavior_tree_msgs REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(nav_msgs REQUIRED)
find_package(tf2 REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)
find_package(line_msg REQUIRED)
find_package(bebop_msgs REQUIRED)
find_package(cv_bridge REQUIRED)
#find_package(realsense2_camera_msgs REQUIRED)
find_package(darknet_ros_msgs REQUIRED)
find_package(pcl_conversions REQUIRED)
find_package(pcl_msgs REQUIRED)
find_package(OpenCV REQUIRED)
find_package(image_transport REQUIRED)
find_package(PCL REQUIRED)

include_directories(
  ${OpenCV_INCLUDE_DIRS}
)

add_executable(test_posi
  src/test_posi.cpp
)

add_executable(posi
  src/posi.cpp
)
add_executable(image_show
  src/image_show.cpp
)

add_executable(bottle
  src/bottle.cpp
)

add_executable(score
  src/score.cpp
)

set(dependencies
  rclcpp 
  std_msgs
  amir_interfaces
  geometry_msgs
  rclcpp_action
  behavior_tree_msgs
  nav_msgs
  Eigen3
  tf2
  tf2_geometry_msgs
  line_msg
  bebop_msgs
  sensor_msgs
  cv_bridge
  #realsense2_camera_msgs
  darknet_ros_msgs
  pcl_conversions
  pcl_msgs
  PCL
  OpenCV
  image_transport
)

ament_target_dependencies(test_posi ${dependencies})
ament_target_dependencies(posi ${dependencies})
ament_target_dependencies(image_show ${dependencies})
ament_target_dependencies(bottle ${dependencies})
ament_target_dependencies(score ${dependencies})

install(TARGETS
  test_posi
  posi
  image_show
  bottle
  score
  DESTINATION lib/${PROJECT_NAME})

# uncomment the following section in order to fill in
# further dependencies manually.
# find_package(<dependency> REQUIRED)



if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
